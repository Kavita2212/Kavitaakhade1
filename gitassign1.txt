ktukaram@LIN51011290 MINGW64 ~
$ git --version
git version 2.33.0.windows.1

ktukaram@LIN51011290 MINGW64 ~
$ mkdir project_dir

ktukaram@LIN51011290 MINGW64 ~
$ cd project_dir

ktukaram@LIN51011290 MINGW64 ~/project_dir
$ git init
Initialized empty Git repository in C:/Users/KTUKARAM/project_dir/.git/

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git help config

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        index.txt

nothing added to commit but untracked files present (use "git add" to track)

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add index.txt

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git commit -m "Successfully commited"
[master (root-commit) 672bfe9] Successfully commited
 Committer: Tukaram Akhade <kavita.tukaram-akhade@capgemini.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 3 insertions(+)
 create mode 100644 index.txt

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ ^C

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git commit -m "added"
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ ls
index.txt

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git add info.txt
fatal: pathspec 'info.txt' did not match any files

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        info.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ touch .gitignore

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        info.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git commit -m "Commited"
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git log
commit 672bfe9f9066ecd6794b9309c18605be9eb260c5 (HEAD -> master)
Author: Tukaram Akhade <kavita.tukaram-akhade@capgemini.com>
Date:   Thu Aug 19 18:28:41 2021 +0530

    Successfully commited

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git revert 672bfe9f9066ecd6794b9309c18605be9eb260c5
error: Your local changes to the following files would be overwritten by merge:
        index.txt
Please commit your changes or stash them before you merge.
Aborting
fatal: revert failed

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git mv add my-add
fatal: bad source, source=add, destination=my-add

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git rename add my-add
git: 'rename' is not a git command. See 'git --help'.

The most similar command is
        rebase

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git config --global alias.my-add add

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git my-add index.txt

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git commit -m "With Renameing commands"
[master 2f843b3] With Renameing commands
 Committer: Tukaram Akhade <kavita.tukaram-akhade@capgemini.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 4 insertions(+), 1 deletion(-)

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git config --global user.username "Kavita2212"

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git config --global user.name "Kavita2212"

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git config --global user.email "kavitaakhade663@gmail.com"

ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$ git revert
usage: git revert [<options>] <commit-ish>...
   or: git revert <subcommand>

    --quit                end revert or cherry-pick sequence
    --continue            resume revert or cherry-pick sequence
    --abort               cancel revert or cherry-pick sequence
    --skip                skip current commit and continue
    --cleanup <mode>      how to strip spaces and #comments from message
    -n, --no-commit       don't automatically commit
    -e, --edit            edit the commit message
    -s, --signoff         add a Signed-off-by trailer
    -m, --mainline <parent-number>
                          select mainline parent
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --strategy <strategy>
                          merge strategy
    -X, --strategy-option <option>
                          option for merge strategy
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit


ktukaram@LIN51011290 MINGW64 ~/project_dir (master)
$




?????????????????/////////////////////////

ktukaram@LIN51011290 MINGW64 ~
$ git --version
git version 2.33.0.windows.1

ktukaram@LIN51011290 MINGW64 ~
$ mkdir Assignments

ktukaram@LIN51011290 MINGW64 ~
$ cd Assignments

ktukaram@LIN51011290 MINGW64 ~/Assignments
$ git add Assignments
fatal: not a git repository (or any of the parent directories): .git

ktukaram@LIN51011290 MINGW64 ~/Assignments
$ git add README.txt
fatal: not a git repository (or any of the parent directories): .git

ktukaram@LIN51011290 MINGW64 ~/Assignments
$ git init
Initialized empty Git repository in C:/Users/KTUKARAM/Assignments/.git/

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git add README.txt

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git commit -m "created first file"
[master (root-commit) cec94f4] created first file
 1 file changed, 1 insertion(+)
 create mode 100644 README.txt

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git branch SND

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git branch html-assignments

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git branch
  SND
  html-assignments
* master

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ git checkout html-assignments
Switched to branch 'html-assignments'

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git status
On branch html-assignments
nothing to commit, working tree clean

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git add html-assignment1
fatal: pathspec 'html-assignment1' did not match any files

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git status
On branch html-assignments
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        html-assignment1.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git add html-assignment1
fatal: pathspec 'html-assignment1' did not match any files

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ cp html-assignment1 html-assignments
cp: cannot stat 'html-assignment1': No such file or directory

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git status
On branch html-assignments
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        html-assignment1.html
        html-assignment1.txt

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git add --all

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git status
On branch html-assignments
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   README.txt
        new file:   html-assignment1.html
        new file:   html-assignment1.txt


ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git commit -m "Change to html"
[html-assignments 5935427] Change to html
 3 files changed, 19 insertions(+), 1 deletion(-)
 create mode 100644 html-assignment1.html
 create mode 100644 html-assignment1.txt

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git status
On branch html-assignments
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   html-assignment1.html

no changes added to commit (use "git add" and/or "git commit -a")

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git add --all

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git commit -m "Hiiii"
[html-assignments 8c4d17f] Hiiii
 1 file changed, 2 insertions(+), 1 deletion(-)

ktukaram@LIN51011290 MINGW64 ~/Assignments (html-assignments)
$ git checkout master
Switched to branch 'master'

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$ ls
README.txt  html-assignment1.html

ktukaram@LIN51011290 MINGW64 ~/Assignments (master)
$


